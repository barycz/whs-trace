1. WTF?
=======

This is a simple client-server application for logging messages from user's
applications.

Usage scenario is trivial:

	1. user runs the server
	2. application being debugged connects to server
	3. application sends debugging messages to server
	...
	4. user terminated program

2. prerequisities
=================

2.1. Client

	You need to integrate client library into your application. This
	is quite straightforward and is shown in 5.
	You need:
		* working C++ compiler (gcc, msvc 2010 or later)

2.2 Server

	The server uses boost for serialization and Qt 5 for gui.

	So you need:
		* static libraries from boost ( >= 1.49.0 )
			see doc/build_boost.txt

		* static build of Qt 5 ( >= 5.1.1 )
			see doc/build_qt5.txt

		* working C++ compiler (gcc, msvc 2010 or later)

	On windows you'd probably need also:

		* Qt Visual Studio 201x Add-in for Qt5

			http://download.qt-project.org/official_releases/vsaddin/qt-vs-addin-1.2.2-opensource.exe

		* qmake.exe in system's path

	


3. Generate global project
==========================

Use command-line CMake or cmake-gui if available.
There are pre-cooked CMakeList.txt files that are templates for project
generator.

First look at sample integrations in sample_integrations/ directory.
Look at following file, please:
	.../DbgToolkit/sample_integrations/trace_client_wh/CMakeList.txt

This is the input file for cmake generator.

for example:
	mkdir _project
	cd _project
	cmake -G "GENERATOR" ..

where you substitute GENERATOR for your generator. For example:
	cmake -G "Visual Studio 11 Win64" ..
	cmake -G "Visual Studio 9 2008 Win64" ..
	cmake -G "MinGW Makefiles" ..
	cmake -G "Unix Makefiles" ..

Then simply call make, mingw32-make or open .sln in visual studio

NOTE:

To build debug version use
	mkdir _project
	cd _project
	cmake -DCMAKE_BUILD_TYPE:STRING=Debug -G "Unix Makefiles" ..

4. Build server part
====================

From source top level:

	cd DbgToolkit/trace_server
	mkdir _project
	cd _project
	cmake -G "Visual Studio 11 Win64" ..


5. Integrate client part
========================

To enable logging you must define
	TRACE_ENABLED
in your project(s).


Client consists of project located in directory
	.../DbgToolkit/trace_client/

To select building strategy, you need to place one of following
macros carefully:
	TRACE_STATIC if you are building trace_client as static library
	TRACE_DLL if you are building trace_client as shared library

(Note: TRACE_DLL should not be specified on projects that uses trace_client)

The important file is trace.h which normally has to be configured for
user's debug levels and contexts. See DbgToolkit/trace_client_wh how to
do that. Essentially there are 3 macros that control inclusion of
user's files:

	TRACE_CONFIG_INCLUDE="../trace_client_wh/wh_config.h"
	TRACE_LEVELS_INCLUDE="../trace_client_wh/wh_levels.h"
	TRACE_CONTEXTS_INCLUDE="../trace_client_wh/wh_contexts.h"


Look into 
	DbgToolkit/sample_integrations/trace_client_wh/CMakeList.txt
to get a feel how to integrate tracing facility.


