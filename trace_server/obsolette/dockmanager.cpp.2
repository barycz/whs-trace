#include "dock.h"
#include "mainwindow.h"
#include "connection.h"
#include "dockmanagerconfig.h"
#include "controlbar_dockmanager.h"
#include "serialize.h"
#include <ui_controlbarcommon.h>
#include <QScrollBar>
/*#include <ui_controlbarlogs.h>
#include <ui_controlbarplots.h>
#include <ui_controlbartables.h>
#include <ui_controlbargantts.h>*/

	CloseButtonDelegate::CloseButtonDelegate (DockManager & mgr, QObject * parent, QPixmap const & icon)
		: QStyledItemDelegate(parent)
		, m_dock_mgr(mgr)
		, m_icon(icon)
	{
		if (m_icon.isNull())
		{
			m_icon = qApp->style()->standardPixmap(QStyle::SP_DialogCloseButton);
		}
	}

	QPoint CloseButtonDelegate::calcIconPos (QStyleOptionViewItem const & option) const
	{
		return QPoint(option.rect.right() - m_icon.width() - margin,
					  option.rect.center().y() - m_icon.height()/2);
	}

	void CloseButtonDelegate::paint (QPainter * painter, QStyleOptionViewItem const & option, QModelIndex const & index) const
	{
		DockManagerModel * m = m_dock_mgr.m_model;

		TreeModel<DockedInfo>::node_t const * n = m->getItemFromIndex(index);

		int const col = index.column();
		if (col == DockManager::e_Column_Close)
		{
			if (n->data.m_close_widget)
				painter->drawPixmap(calcIconPos(option), m_icon);
		}
		QStyledItemDelegate::paint(painter, option, index);
		// Only display the close icon for top level items...
		//if(!index.parent().isValid()
				// ...and when the mouse is hovering the item
				// (mouseTracking must be enabled on the view)
				//&& (option.state & QStyle::State_MouseOver))
				//)
	}

	QSize CloseButtonDelegate::sizeHint (QStyleOptionViewItem const & option, QModelIndex const & index) const
	{
		QSize size = QStyledItemDelegate::sizeHint(option, index);

		// Make some room for the close icon
		if (!index.parent().isValid()) {
			size.rwidth() += m_icon.width() + margin * 2;
			size.setHeight(qMax(size.height(), m_icon.height() + margin * 2));
		}
		return size;
	}

	bool CloseButtonDelegate::editorEvent (QEvent * event, QAbstractItemModel * model, QStyleOptionViewItem const & option, QModelIndex const & index)
	{
		// Emit a signal when the icon is clicked
		if (!index.parent().isValid() && event->type() == QEvent::MouseButtonRelease)
		{
			QMouseEvent const * mouseEvent = static_cast<QMouseEvent const *>(event);
			QRect const closeButtonRect = m_icon.rect().translated(calcIconPos(option));
			if (closeButtonRect.contains(mouseEvent->pos()))
			{
				emit closeIndexClicked(index);
			}
		}
		return false;
	}


	ControlWidgetDelegate::ControlWidgetDelegate (DockManager & mgr, QObject * parent)
		: QStyledItemDelegate(parent)
		, m_dock_mgr(mgr)
	{
	}

	QWidget * ControlWidgetDelegate::createEditor (QWidget * parent, QStyleOptionViewItem const &, QModelIndex const & idx) const
	{
		if (!idx.isValid()) return 0;
		if (idx.column() == DockManager::e_Column_Close)
		{
			TreeModel<DockedInfo>::node_t * const n = m_dock_mgr.m_model->getItemFromIndex(idx);
			return n->data.m_close_widget;
		}
		return 0;
	}

	void ControlWidgetDelegate::setEditorData (QWidget * editor, QModelIndex const & index) const
	{
		//int value = index.model()->data(index, Qt::EditRole).toInt();

		//QSpinBox *spinBox = static_cast<QSpinBox*>(editor);
		//spinBox->setValue(value);
	}

	void ControlWidgetDelegate::setModelData (QWidget * editor, QAbstractItemModel * model, QModelIndex const & index) const
	{
		//QSpinBox *spinBox = static_cast<QSpinBox*>(editor);
		//spinBox->interpretText();
		//int value = spinBox->value();

		//model->setData(index, value, Qt::EditRole);
	}

	void ControlWidgetDelegate::updateEditorGeometry(QWidget * editor, QStyleOptionViewItem const & option, QModelIndex const & idx) const
	{
		editor->setGeometry(option.rect);
	}


DockManager::DockManager (MainWindow * mw, QStringList const & path)
	: DockManagerView(mw), ActionAble(path)
	, m_main_window(mw)
	, m_dockwidget(0)
	, m_control_bar(0)
	, m_model(0)
	, m_config(g_traceServerName)
{
	qDebug("%s", __FUNCTION__);
	resizeColumnToContents(0);

	QString const name = path.join("/");
	QDockWidget * const dock = new DockWidget(*this, name, m_main_window);
	dock->setObjectName(name);
	dock->setWindowTitle(name);
	dock->setAllowedAreas(Qt::AllDockWidgetAreas);
	m_main_window->addDockWidget(Qt::BottomDockWidgetArea, dock);
	dock->setAttribute(Qt::WA_DeleteOnClose, false);
	dock->setWidget(this);

	//if (visible)
	//	m_main_window->restoreDockWidget(dock);
	m_dockwidget = dock;

	connect(m_dockwidget, SIGNAL(widgetVisibilityChanged()), m_main_window, SLOT(onDockManagerVisibilityChanged(bool)));
	m_control_bar = new ControlBarCommon();

	connect(header(), SIGNAL(sectionResized(int, int, int)), this, SLOT(onColumnResized(int, int, int)));
	//connect(this, SIGNAL(clicked(QModelIndex)), this, SLOT(onClicked(QModelIndex)));
	connect(m_dockwidget, SIGNAL(dockClosed()), mw, SLOT(onDockManagerClosed()));
	setAllColumnsShowFocus(false);
	setExpandsOnDoubleClick(false);
	//setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOn);
	//setSizeAdjustPolicy(QAbstractScrollArea::AdjustIgnored);
	//header()->setSectionResizeMode(0, QHeaderView::Interactive);
	header()->setStretchLastSection(false);
	//setItemDelegateForColumn(e_Column_Close, new CloseButtonDelegate(*this, this));
	setItemDelegateForColumn(e_Column_Close, new CloseButtonDelegate(*this, this));
	setStyleSheet("QTreeView::item{ selection-background-color: #FFE7BA } QTreeView::item{ selection-color: #000000 }");
	//horizontalScrollBar()->setStyleSheet("QScrollBar:horizontal { border: 1px solid grey; height: 15px; } QScrollBar::handle:horizontal { background: white; min-width: 10px; }");
	/*
	setStyleSheet(QString::fromUtf8("QScrollBar:vertical {               
		"    border: 1px solid #999999;"
		"    background:white;"
		"    width:10px;    "
		"    margin: 0px 0px 0px 0px;"
		"}"
		"QScrollBar::handle:vertical {"
		"    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
		"    stop: 0  rgb(32, 47, 130), stop: 0.5 rgb(32, 47, 130),  stop:1 rgb(32, 47, 130));"
		"    min-height: 0px;"
		""
		"}"
		"QScrollBar::add-line:vertical {"
		"    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
		"    stop: 0  rgb(32, 47, 130), stop: 0.5 rgb(32, 47, 130),  stop:1 rgb(32, 47, 130));"
		"    height: px;"
		"    subcontrol-position: bottom;"
		"    subcontrol-origin: margin;"
		"}"
		"QScrollBar::sub-line:vertical {"
		"    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
		"    stop: 0  rgb(32, 47, 130), stop: 0.5 rgb(32, 47, 130),  stop:1 rgb(32, 47, 130));"
		"    height: 0px;"
		"    subcontrol-position: top;"
		"    subcontrol-origin: margin;"
		"}"
		""));
*/	
}

void DockManager::loadConfig (QString const & cfgpath)
{
	QString const fname = cfgpath + "/" + g_dockManagerTag;
	DockManagerConfig config2(g_traceServerName);
	if (!::loadConfigTemplate(config2, fname))
	{
		m_config.defaultConfig();
	}
	else
	{
		m_config = config2;
		config2.m_data.root = 0; // @TODO: promyslet.. takle na to urcite zapomenu
	}

	m_model = new DockManagerModel(*this, this, &m_config.m_data);
	setModel(m_model);
	bool const on = true;
	addActionAble(*this, on);
}

void DockManager::applyConfig ()
{
	for (size_t i = 0, ie = m_config.m_columns_sizes.size(); i < ie; ++i)
	{
		header()->resizeSection(static_cast<int>(i), m_config.m_columns_sizes[i]);
	}

	if (m_model)
		m_model->syncExpandState(this);
}

void DockManager::saveConfig (QString const & path)
{
	QString const fname = path + "/" + g_dockManagerTag;
	::saveConfigTemplate(m_config, fname);
}

DockManager::~DockManager ()
{
	removeActionAble(*this);
	disconnect(this, SIGNAL(clicked(QModelIndex)), this, SLOT(onClicked(QModelIndex)));
}

DockWidget * DockManager::mkDockWidget (DockedWidgetBase & dwb, bool visible)
{
	return mkDockWidget(dwb, visible, Qt::BottomDockWidgetArea);
}

DockWidget * DockManager::mkDockWidget (ActionAble & aa, bool visible, Qt::DockWidgetArea area)
{
	qDebug("%s", __FUNCTION__);
	Q_ASSERT(aa.path().size() > 0);

	QString const name = aa.path().join("/");
	DockWidget * const dock = new DockWidget(*this, name, m_main_window);
	dock->setObjectName(name);
	dock->setWindowTitle(name);
	dock->setAllowedAreas(Qt::AllDockWidgetAreas);
	//dock->setWidget(docked_widget); // set by caller
	m_main_window->addDockWidget(area, dock);
	//m_widgets.insert(name, dock);
	dock->setAttribute(Qt::WA_DeleteOnClose, false);

	if (visible)
		m_main_window->restoreDockWidget(dock);
	return dock;
}

void DockManager::onWidgetClosed (DockWidget * w)
{
	qDebug("%s w=%08x", __FUNCTION__, w);
	//m_widgets.remove(w->objectName());
}

QModelIndex DockManager::addActionAble (ActionAble & aa, bool on)
{
	qDebug("%s aa=%s show=%i", __FUNCTION__, aa.joinedPath().toStdString().c_str(), on);
	QModelIndex const idx = m_model->insertItemWithPath(aa.path(), on);

	/*{
		QModelIndex const jdx = m_model->index(idx.row(), e_Column_ControlWidget, idx.parent());
		if (jdx.isValid())
			setIndexWidget(jdx, aa.controlWidget());
	}*/
	{
		QModelIndex const jdx = m_model->index(idx.row(), e_Column_Close, idx.parent());
		if (jdx.isValid())
		{
			QPushButton * b = new QPushButton("X");
			b->setStyleSheet("color: rgb(255, 0, 0)");
			connect(b, SIGNAL(clicked()), this, SLOT(onCloseButton()));
			TreeModel<DockedInfo>::node_t * const n = m_model->getItemFromIndex(idx);
			n->data.m_close_widget = b;
		}
	}

	// @TODO: set type=AA into returned node
	m_model->setData(idx, QVariant(on ? Qt::Checked : Qt::Unchecked), Qt::CheckStateRole);
	QString const & name = aa.joinedPath();
	m_actionables.insert(name, &aa);
	//aa.m_idx = idx;
	//resizeColumnToContents(0);
	return idx;
}

ActionAble const * DockManager::findActionAble (QString const & dst_joined) const
{
	actionables_t::const_iterator it = m_actionables.find(dst_joined);
	if (it != m_actionables.end() && it.key() == dst_joined)
		return *it;
	return 0;
}

void DockManager::removeActionAble (ActionAble & aa)
{
	qDebug("%s aa=%s", __FUNCTION__, aa.joinedPath().toStdString().c_str());
	actionables_t::iterator it = m_actionables.find(aa.joinedPath());
	if (it != m_actionables.end() && it.key() == aa.joinedPath())
	{
		QModelIndex const idx = m_model->testItemWithPath(aa.path());
		if (idx.isValid())
		{
			for (int i = 1; i < e_max_dockmgr_column; ++i)
			{
				QModelIndex const idx1 = m_model->index(idx.row(), i, idx.parent());
				setIndexWidget(idx1, 0); // reclaim ownership
			  }
			//aa.controlWidget()->setparent(0); je to k necemu?
		}
		m_actionables.erase(it);
	}
}

void DockManager::onColumnResized (int idx, int , int new_size)
{
	if (idx < 0) return;
	size_t const curr_sz = m_config.m_columns_sizes.size();
	if (idx < curr_sz)
	{
		//qDebug("%s this=0x%08x hsize[%i]=%i", __FUNCTION__, this, idx, new_size);
	}
	else
	{
		m_config.m_columns_sizes.resize(idx + 1);
		for (size_t i = curr_sz; i < idx + 1; ++i)
			m_config.m_columns_sizes[i] = 32;
	}
	m_config.m_columns_sizes[idx] = new_size;
}

bool DockManager::handleAction (Action * a, E_ActionHandleType sync)
{
	QStringList const & src_path = a->m_src_path;
	QStringList const & dst_path = a->m_dst_path;
	QStringList const & my_addr = path();

	if (dst_path.size() == 0)
	{
		qWarning("DockManager::handleAction empty dst");
		return false;
	}

	Q_ASSERT(my_addr.size() == 1);
	int const lvl = dst_path.indexOf(my_addr.at(0), a->m_dst_curr_level);
	if (lvl == -1)
	{
		qWarning("DockManager::handleAction message not for me");
		return false;
	}
	else if (lvl == dst_path.size() - 1)
	{
		// message just for me! gr8!
		a->m_dst_curr_level = lvl;
		a->m_dst = this;
		return true;
	}
	else
	{
		// message for my children
		a->m_dst_curr_level = lvl + 1;

		if (a->m_dst_curr_level >= 0 && a->m_dst_curr_level < dst_path.size())
		{
			QString const dst_joined = dst_path.join("/");
			actionables_t::iterator it = m_actionables.find(dst_joined);
			if (it != m_actionables.end() && it.key() == dst_joined)
			{
				qDebug("delivering action to: %s", dst_joined.toStdString().c_str());
				ActionAble * const next_hop =  it.value();
				next_hop->handleAction(a, sync); //@NOTE: e_Close can invalidate iterator
			}
			else
			{
				//@TODO: find least common subpath
			}
		}
		else
		{
			qWarning("DockManager::handleAction hmm? what?");
		}
	}
	return false;
}

void DockManager::onClicked (QModelIndex idx)
{
	TreeModel<DockedInfo>::node_t const * n = m_model->getItemFromIndex(idx);
	QStringList const & dst = n->data.m_path;

	/*int const col = idx.column();
	if (col == e_Visibility)
	{
		Action a;
		a.m_type = static_cast<E_ActionType>(col);
		a.m_src_path = path();
		a.m_src = this;
		a.m_dst_path = dst;

		int const state = m_model->data(idx, Qt::CheckStateRole).toInt();
		a.m_args.push_back(state);
		handleAction(&a, e_Sync);
	}
	*/
	/*if (col == e_InCentralWidget)
	{
		int const state = m_model->data(idx, e_DockRoleCentralWidget).toInt();
		int const new_state = state == 0 ? 1 : 0;

		m_model->setData(idx, new_state, e_DockRoleCentralWidget);
		a.m_args.push_back(new_state);
	}*/

	//av.m_dst = 0;
}


bool DockManager::findClickedActionAble (QPushButton const * const b, TreeModel<DockedInfo>::node_t const * node, QStringList & aa) const
{
	node = node->children;
	while (node)
	{
		if (node->data.m_close_widget == b)
		{
			aa = node->data.m_path;
			return true;
		}
		if (findClickedActionAble(b, node, aa))
			return true;
		node = node->next;
	}
	return false;
}

void DockManager::onCloseButton ()
{
	QObject * src = QObject::sender();
	if (QPushButton * button = qobject_cast<QPushButton *>(src))
	{
		QStringList dst_path;
		if (findClickedActionAble(button, m_config.m_data.root, dst_path))
		{
			Action a;
			a.m_type = e_Close;
			a.m_src_path = path();
			a.m_src = this;
			a.m_dst_path = dst_path;
			//a.m_args.push_back(state);
			handleAction(&a, e_Sync);
		}
	}
}

